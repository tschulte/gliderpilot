<?xml version="1.0" encoding="UTF-8"?>
<project name="Gliderpilot" default="build" basedir=".">
    <!--
    all build artefacts are deposited under this directory.
  -->
    <property name="build.dir" value="${basedir}/build" />

    <property name="build.classes" value="${build.dir}/classes" />
    <!--
    classes generated by the javac compiler are deposited in this
    directory.
  -->
    <property name="build.classes.app" value="${build.classes}/app" />
    <!--
    classes generated by the javac compiler for the JUnit-Tests are deposited in 
    this
    directory.
  -->
    <property name="build.classes.junit" value="${build.classes}/JUnit" />

    <!--
    instrumented classes are deposited into this directory.
  -->
    <property name="build.classes.instrumented"
              value="${build.classes}/instrumented" />

    <property name="build.reports" value="${build.dir}/reports" />
    <!--
    coverage reports are deposited into this directory. For the
    HTML report, look at ${build.reports.coverage}/index.html. For the XML
    report look at ${build.reports.coverage}/coverage.xml.
  -->
    <property name="build.reports.coverage" value="${build.reports}/coverage" />

    <!--
    unit test reports from junit are deposited in this directory.
  -->
    <property name="build.reports.JUnit" value="${build.reports}/JUnit" />

    <property name="build.doc.dir" value="${build.dir}/doc" />
    <!--
    Documnentation generated by javadoc are deposited in 
    this
    directory.
  -->
    <property name="build.javadoc.dir" value="${build.doc.dir}/API" />

    <!--
    the source code can be found in this directories.
  -->
    <property name="src.dir" value="${basedir}/src" />
    <property name="src.dir.app" value="${src.dir}/app" />
    <property name="src.dir.JUnit" value="${src.dir}/JUnit" />
    <property name="compile.debug" value="false" />
    <property name="compile.optimize" value="true" />
    <property name="src.encoding" value="UTF-8" />
    <property name="src.version" value="1.5" />
    <property name="target.version" value="jsr14" />

    <!-- external libraries are found here -->
    <property name="lib.dir" value="${basedir}/lib" />

    <path id="classes.app">
        <dirset dir="${build.classes.app}" />
    </path>
    <path id="lib.junit">
        <fileset dir="${lib.dir}">
            <include name="junit/*.jar" />
        </fileset>
    </path>
    <path id="lib.jscience">
        <fileset dir="${lib.dir}">
            <include name="jscience/**/*.jar" />
            <include name="javolution/**/*.jar" />
        </fileset>
    </path>
    <path id="lib.logging">
        <fileset dir="${lib.dir}">
            <include name="commons-logging/*.jar" />
        </fileset>
    </path>

    <path id="compile.classpath.app">
        <path refid="lib.jscience" />
        <path refid="lib.logging" />
    </path>
    <path id="compile.classpath.junit">
        <path refid="lib.jscience" />
        <path refid="lib.logging" />
        <path refid="lib.logging" />
        <dirset dir="${build.classes.app}" />
    </path>

    <!-- For the Coverage reports -->
    <path id="lib.emma">
        <fileset dir="${lib.dir}">
            <include name="emma/**/*.jar" />
        </fileset>
    </path>
    <taskdef resource="emma_ant.properties" classpathref="lib.emma" />

    <target name="clean" description="clean up build artefacts">
        <delete quiet="true">
            <fileset dir="${build.dir}" />
        </delete>
        <deltree dir="${build.dir}" />
    </target>

    <target name="init">
        <mkdir dir="${build.dir}" />
        <mkdir dir="${build.classes}" />
        <mkdir dir="${build.classes.app}" />
        <mkdir dir="${build.classes.junit}" />
        <mkdir dir="${build.classes.instrumented}" />
        <mkdir dir="${build.reports}" />
        <mkdir dir="${build.reports.coverage}" />
        <mkdir dir="${build.reports.JUnit}" />
    </target>

    <target name="build"
            description="Build and Test everything"
            depends="clean, coverage" />

    <target name="compile" description="compile all classes" depends="init">
        <javac srcdir="${src.dir.app}"
               destdir="${build.classes.app}"
               failonerror="yes"
               source="${src.version}"
               target="${target.version}"
               debug="${compile.debug}"
               optimize="${compile.optimize}"
               encoding="${src.encoding}"
               classpathref="compile.classpath.app" />
        <javac srcdir="${src.dir.JUnit}"
               destdir="${build.classes.junit}"
               failonerror="yes"
               source="${src.version}"
               target="${target.version}"
               debug="${compile.debug}"
               optimize="${compile.optimize}"
               encoding="${src.encoding}"
               classpathref="compile.classpath.junit" />
        <copy todir="${build.classes.junit}">
            <fileset dir="${src.dir.JUnit}">
                <include name="**/*" />
                <exclude name="**/*.java" />
            </fileset>
        </copy>
    </target>

    <target name="instrument" depends="compile">
        <!--
      instrument the application classes, writing the instrumented
      classes into ${build.classes.instrumented}.
    -->
        <emma>
            <instr instrpathref="classes.app"
                   destdir="${build.classes.instrumented}"
                   metadatafile="${build.reports.coverage}/metadata.emma" />
        </emma>
    </target>

    <target name="test"
            description="Unit test the application"
            depends="instrument">
        <junit fork="true"
               errorProperty="test.failed"
               failureProperty="test.failed">
            <!--
        note the classpath order, instrumented classes are before the
        original (uninstrumented) classes.
      -->
            <classpath location="${build.classes.instrumented}" />
            <classpath location="${build.classes.app}" />
            <classpath location="${build.classes.junit}" />

            <!--
        the instrumented classes reference classes used by the
        jcoverage runtime.
      -->
            <classpath refid="lib.emma" />
            <classpath refid="lib.junit" />
            <classpath refid="lib.jscience" />
            <classpath refid="lib.logging" />

            <jvmarg value="-Demma.coverage.out.file=${build.reports.coverage}/coverage.emma" />
            <jvmarg value="-Demma.coverage.out.merge=false" />
            <assertions>
                <enable />
            </assertions>
            <formatter type="xml" />
            <batchtest todir="${build.reports.JUnit}">
                <fileset dir="${src.dir.JUnit}">
                    <include name="**/*Test.java" />
                    <exclude name="**/Abstract*Test.java" />
                </fileset>
            </batchtest>
        </junit>
        <junitreport todir="${build.reports.JUnit}">
            <fileset dir="${build.reports.JUnit}" includes="TEST*.xml" />
            <report todir="${build.reports.JUnit}" />
        </junitreport>
        <fail if="test.failed"/>
    </target>

    <target name="coverage"
            description="Create coverage in build/reports/coverage"
            depends="test">
        <emma>
            <report sourcepath="${src.dir.app}">
                <fileset dir="${build.reports.coverage}">
                    <include name="*.emma" />
                </fileset>

                <txt outfile="${build.reports.coverage}/coverage.txt" />
                <html outfile="${build.reports.coverage}/coverage.html" />
            </report>
        </emma>
        <echo>
coverage reports have been generated.
The HTML report is ${build.reports.coverage}/coverage.html
The text report is ${build.reports.coverage}/coverage.txt
    </echo>
    </target>

    <target name="javadoc" description="Generate Javadoc">
        <javadoc destdir="${build.javadoc.dir}"
                 source="${src.version}"
                 encoding="${src.encoding}"
                 classpathref="compile.classpath.app"  access="package">
            <packageset dir="${src.dir.app}"/>
        </javadoc>
    </target>
</project>
